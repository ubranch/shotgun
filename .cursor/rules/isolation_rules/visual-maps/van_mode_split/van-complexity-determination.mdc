---
description: van complexity determination
globs: van-complexity-determination.mdc
alwaysapply: false
---
# van complexity determination

> **tldr:** this document outlines the process for determining task complexity during the van (verify, analyze, narrate) mode, ensuring that tasks are assigned the appropriate level of governance and process.

## üå≥ complexity decision tree

```mermaid
graph td
    start["new task"] --> q1{"bug fix or<br>error correction?"}
    q1 -->|yes| q1a{"affects single<br>component?"}
    q1a -->|yes| l1["level 1:<br>quick bug fix"]
    q1a -->|no| q1b{"affects multiple<br>components?"}
    q1b -->|yes| l2["level 2:<br>simple enhancement"]
    q1b -->|no| q1c{"affects system<br>architecture?"}
    q1c -->|yes| l3["level 3:<br>intermediate feature"]
    q1c -->|no| l2
    
    q1 -->|no| q2{"adding small<br>feature or<br>enhancement?"}
    q2 -->|yes| q2a{"self-contained<br>change?"}
    q2a -->|yes| l2
    q2a -->|no| q2b{"affects multiple<br>components?"}
    q2b -->|yes| l3
    q2b -->|no| l2
    
    q2 -->|no| q3{"complete feature<br>requiring multiple<br>components?"}
    q3 -->|yes| q3a{"architectural<br>implications?"}
    q3a -->|yes| l4["level 4:<br>complex system"]
    q3a -->|no| l3
    
    q3 -->|no| q4{"system-wide or<br>architectural<br>change?"}
    q4 -->|yes| l4
    q4 -->|no| l3
    
    l1 --> loadl1["load level 1 map"]
    l2 --> loadl2["load level 2 map"]
    l3 --> loadl3["load level 3 map"]
    l4 --> loadl4["load level 4 map"]
```

## üìä complexity level indicators

use these indicators to help determine task complexity:

### level 1: quick bug fix
- **keywords**: "fix", "broken", "not working", "issue", "bug", "error", "crash"
- **scope**: single component or ui element
- **duration**: can be completed quickly (minutes to hours)
- **risk**: low, isolated changes
- **examples**:
  - fix button not working
  - correct styling issue
  - fix validation error
  - resolve broken link
  - fix typo or text issue

### level 2: simple enhancement
- **keywords**: "add", "improve", "update", "change", "enhance", "modify"
- **scope**: single component or subsystem
- **duration**: hours to 1-2 days
- **risk**: moderate, contained to specific area
- **examples**:
  - add form field
  - improve validation
  - update styling
  - add simple feature
  - change text content
  - enhance existing component

### level 3: intermediate feature
- **keywords**: "implement", "create", "develop", "build", "feature"
- **scope**: multiple components, complete feature
- **duration**: days to 1-2 weeks
- **risk**: significant, affects multiple areas
- **examples**:
  - implement user authentication
  - create dashboard
  - develop search functionality
  - build user profile system
  - implement data visualization
  - create complex form system

### level 4: complex system
- **keywords**: "system", "architecture", "redesign", "integration", "framework"
- **scope**: multiple subsystems or entire application
- **duration**: weeks to months
- **risk**: high, architectural implications
- **examples**:
  - implement authentication system
  - build payment processing framework
  - create microservice architecture
  - implement database migration system
  - develop real-time communication system
  - create multi-tenant architecture

## üîç complexity assessment questions

answer these questions to determine complexity:

1. **scope impact**
   - does it affect a single component or multiple?
   - are there system-wide implications?
   - how many files will need to be modified?

2. **design decisions**
   - are complex design decisions required?
   - will it require creative phases for design?
   - are there architectural considerations?

3. **risk assessment**
   - what happens if it fails?
   - are there security implications?
   - will it affect critical functionality?

4. **implementation effort**
   - how long will it take to implement?
   - does it require specialized knowledge?
   - is extensive testing needed?

## üìä keyword analysis table

| keyword | likely level | notes |
|---------|--------------|-------|
| "fix" | level 1 | unless system-wide |
| "bug" | level 1 | unless multiple components |
| "error" | level 1 | unless architectural |
| "add" | level 2 | unless complex feature |
| "update" | level 2 | unless architectural |
| "improve" | level 2 | unless system-wide |
| "implement" | level 3 | complex components |
| "create" | level 3 | new functionality |
| "develop" | level 3 | significant scope |
| "system" | level 4 | architectural implications |
| "architecture" | level 4 | major structural changes |
| "framework" | level 4 | core infrastructure |

## üîÑ complexity escalation

if during a task you discover it's more complex than initially determined:

```
‚ö†Ô∏è task escalation needed
current level: level [x]
recommended level: level [y]
reason: [brief explanation]

would you like me to escalate this task to level [y]?
```

if approved, switch to the appropriate higher-level process map.

## üéØ process selection

after determining complexity, load the appropriate process map:

| level | description | process map |
|-------|-------------|-------------|
| 1 | quick bug fix | [level 1 map](mdc:.cursor/rules/visual-maps/level1-map.mdc) |
| 2 | simple enhancement | [level 2 map](mdc:.cursor/rules/visual-maps/level2-map.mdc) |
| 3 | intermediate feature | [level 3 map](mdc:.cursor/rules/visual-maps/level3-map.mdc) |
| 4 | complex system | [level 4 map](mdc:.cursor/rules/visual-maps/level4-map.mdc) |

## üìù complexity determination template

use this template to document complexity determination:

```
## complexity determination

task: [task description]

assessment:
- scope: [single component/multiple components/system-wide]
- design decisions: [simple/moderate/complex]
- risk: [low/moderate/high]
- implementation effort: [low/moderate/high]

keywords identified: [list relevant keywords]

determination: level [1/2/3/4] - [quick bug fix/simple enhancement/intermediate feature/complex system]

loading process map: [level x map]
```