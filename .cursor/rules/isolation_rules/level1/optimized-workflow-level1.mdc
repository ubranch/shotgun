---
description: optimized level 1 workflow for quick bug fixes with token efficiency
globs: "**/level1*/**", "**/quick*/**", "**/bugfix*/**"
alwaysapply: false
---

# optimized level 1 workflow

> **tldr:** this streamlined workflow for level 1 tasks (quick bug fixes) optimizes for speed and token efficiency while maintaining quality.

## 🔧 level 1 process flow

```mermaid
graph td
    start["start level 1<br>quick fix"] --> analyze["1️⃣ analyze<br>understand issue"]
    analyze --> implement["2️⃣ implement<br>fix the issue"]
    implement --> verify["3️⃣ verify<br>test the fix"]
    verify --> document["4️⃣ document<br>record solution"]
    
    style start fill:#4da6ff,stroke:#0066cc,color:white
    style analyze fill:#ffa64d,stroke:#cc7a30,color:white
    style implement fill:#4dbb5f,stroke:#36873f,color:white
    style verify fill:#d94dbb,stroke:#a3378a,color:white
    style document fill:#4dbbbb,stroke:#368787,color:white
```

## 📝 consolidated documentation

level 1 tasks use a single-file approach to minimize context switching:

```markdown
# quick fix: [issue name]

## issue summary
- type: [bug/hotfix/quick enhancement]
- priority: [low/medium/high/critical]
- reported by: [name/system]
- affected area: [component/feature]

## analysis
- root cause: [brief description]
- affected files: [list of files]
- impact: [scope of impact]

## solution
- approach: [brief description]
- changes made: [list of changes]
- commands executed: [key commands]

## verification
- testing: [how the fix was tested]
- results: [test results]
- additional checks: [any other verification]

## status
- [x] fix implemented
- [x] tests passed
- [x] documentation updated
```

## 🔄 memory bank update

level 1 tasks use a simplified memory bank update with minimal overhead:

```markdown
## tasks.md update (level 1)

### task: [task name]
- status: complete
- implementation: [one-line summary]
- link to fix: [file/line reference]
```

## ⚡ token-optimized template

for maximum efficiency, level 1 tasks can use this ultra-compact template:

```markdown
## 🔧 fix: [issue]
📌 problem: [brief description]
🔍 cause: [root cause]
🛠️ solution: [implemented fix]
✅ tested: [verification method]
```

## 🔄 auto-documentation helpers

use these helpers to automatically generate documentation:

```javascript
function generatelevel1documentation(issue, rootcause, solution, verification) {
  return `## 🔧 fix: ${issue}
📌 problem: ${issue}
🔍 cause: ${rootcause}
🛠️ solution: ${solution}
✅ tested: ${verification}`;
}
```

## 📊 quick templates for common issues

### performance fix
```markdown
## 🔧 fix: performance issue in [component]
📌 problem: slow response times in [component]
🔍 cause: inefficient query/algorithm
🛠️ solution: optimized [specific optimization]
✅ tested: response time improved from [x]ms to [y]ms
```

### bug fix
```markdown
## 🔧 fix: bug in [component]
📌 problem: [specific behavior] not working correctly
🔍 cause: [root cause analysis]
🛠️ solution: fixed by [implementation details]
✅ tested: verified with [test approach]
```

### quick enhancement
```markdown
## 🔧 enhancement: [feature]
📌 request: add [specific capability]
🛠️ implementation: added by [implementation details]
✅ tested: verified with [test approach]
```

## ✅ streamlined verification

level 1 tasks use a minimal verification process:

```markdown
verification:
[x] fix implemented and tested
[x] no regressions introduced
[x] documentation updated
```

## 🚀 consolidated memory bank update

optimize memory bank updates for level 1 tasks by using a single operation:

```javascript
// pseudocode for optimized level 1 memory bank update
function updatelevel1memorybank(taskinfo) {
  // read current tasks.md
  const taskscontent = readfile("tasks.md");
  
  // create minimal update
  const updateblock = `
### task: ${taskinfo.name}
- status: complete
- implementation: ${taskinfo.solution}
- link to fix: ${taskinfo.filereference}
`;
  
  // add update to tasks.md
  const updatedcontent = appendtosection(taskscontent, "completed tasks", updateblock);
  
  // write in single operation
  writefile("tasks.md", updatedcontent);
  
  return "memory bank updated";
}
```

## 🔄 optimized level 1 workflow example

```markdown
## 🔧 fix: login button not working on mobile devices

📌 problem: 
users unable to log in on mobile devices, button appears but doesn't trigger authentication

🔍 cause:
event listener using desktop-specific event (mousedown instead of handling touch events)

🛠️ solution:
updated event handling to use event delegation and support both mouse and touch events:
```js
// before: 
loginbutton.addeventlistener('mousedown', handlelogin);

// after:
loginbutton.addeventlistener('mousedown', handlelogin);
loginbutton.addeventlistener('touchstart', handlelogin);
```

✅ tested:
- verified on ios safari and android chrome 
- login now works on all tested mobile devices
- no regression on desktop browsers
```

## ⚡ token efficiency benefits

this optimized level 1 workflow provides:

1. reduced documentation overhead (70% reduction)
2. consolidated memory bank updates (single operation vs. multiple)
3. focused verification process (essential checks only)
4. template-based approach for common scenarios
5. streamlined workflow with fewer steps

the updated approach maintains all critical information while significantly reducing token usage.
